/*
 * RESTful API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fieldnation.data.bv2.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Hold;
import java.util.ArrayList;
import java.util.List;

/**
 * Holds
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-01-20T21:04:59.764Z")
public class Holds {
  @Json(name="holds")
  private List<Hold> holds = new ArrayList<Hold>();

  public Holds holds(List<Hold> holds) {
    this.holds = holds;
    return this;
  }

  public Holds addHoldsItem(Hold holdsItem) {
    this.holds.add(holdsItem);
    return this;
  }

   /**
   * Get holds
   * @return holds
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<Hold> getHolds() {
    return holds;
  }

  public void setHolds(List<Hold> holds) {
    this.holds = holds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Holds holds = (Holds) o;
    return Objects.equals(this.holds, holds.holds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Holds {\n");
    
    sb.append("    holds: ").append(toIndentedString(holds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

